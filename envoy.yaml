# ############################################################################
#
#   Descrição:  Configuração do Proxy Envoy para traduzir
#               pedidos gRPC-Web (do navegador) para gRPC (para o servidor).
#
# ############################################################################
static_resources:
  listeners:
  - name: listener_0
    address:
      socket_address: { address: 0.0.0.0, port_value: 8080 }
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: grpc_json
          codec_type: AUTO
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains: ["*"]
              routes:
              - match: { prefix: "/" }
                route:
                  cluster: tetris_service
                  # Configuração de CORS para permitir pedidos de qualquer origem
                  cors:
                    allow_origin_string_match:
                      - prefix: "*"
                    allow_methods: GET, PUT, DELETE, POST, OPTIONS
                    allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout
                    max_age: "1728000"
                    expose_headers: grpc-status,grpc-message
          http_filters:
          # Filtro que faz a magia da tradução de gRPC-Web
          - name: envoy.filters.http.grpc_web
            typed_config: 
              "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_web.v3.GrpcWeb
          # Filtro para aplicar as regras de CORS
          - name: envoy.filters.http.cors
            typed_config: 
              "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
          # Filtro que encaminha o pedido para o cluster de destino
          - name: envoy.filters.http.router
            typed_config: 
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
  clusters:
  # Define o nosso servidor Node.js como o destino
  - name: tetris_service
    connect_timeout: 0.25s
    type: LOGICAL_DNS
    # Especifica que o servidor de destino usa HTTP/2 (necessário para gRPC)
    typed_extension_protocol_options:
      envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
        "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
        explicit_http_config:
          http2_protocol_options: {}
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: cluster_0
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              # Aponta para o nosso servidor Node.js que está a correr na porta 9090
              # 'host.docker.internal' é um nome especial que permite ao contentor do Envoy
              # comunicar com serviços que estão a correr na máquina anfitriã (o seu PC).
              socket_address: { address: host.docker.internal, port_value: 9090 }
